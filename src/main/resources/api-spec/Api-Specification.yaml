openapi: 3.0.3
info:
  title: Swagger Hold Me Accountable - OpenAPI 3.0
  version: "1"
  description: |-
    API specification for all REST endpoints planned for the "Hold Me Accountable" application

############################ TAGS ############################
tags:
  - name: Tracker
    description: A tracker for a specific goal the user wants to track
  - name: TrackerEntry
    description: An entry the user creates to track a goal they sett
  - name: User
    description: An application user who either tracks their own goal, reviews another users goal, or both

############################ PATHS ############################
paths:
  ######################## TRACKER PATH ############################
  /trackers:
    post:
      tags:
        - Tracker
      summary: Create a new tracker
      description: Creates a new tracker for a specific user and goal type. Each user can only track each goal once.
      operationId: createTracker
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTracker'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerDetails'
        '400':
          description: Invalid data supplied
        '405':
          description: Validation exception
    ######TODO: add query params
    get:
      tags:
        - Tracker
      summary: gets a list of trackers
      operationId: getTrackers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerDetails'
        '400':
          description: Invalid data supplied
        '405':
          description: Validation exception
  /trackers/{id}:
    get:
      tags:
        - Tracker
      summary: get a specific tracker from the db
      operationId: getTracker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerDetails'
        '404':
          description: Entity not found
        '405':
          description: Validation exception
    patch:
      tags:
        - Tracker
      summary: saves updates to a specific tracker
      operationId: updateTracker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTracker'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Entity not found
        '405':
          description: Validation exception
    delete:
      tags:
        - Tracker
      summary: deletes a tracker
      operationId: deleteTracker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '404':
          description: Entity not found
        '405':
          description: Validation exception
  ############################ USER PATH ############################
  /users:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '400':
          description: Invalid data supplied
        '405':
          description: Validation exception
    ######TODO: add query params
    get:
      tags:
        - User
      summary: gets a list of users
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '400':
          description: Invalid data supplied
        '405':
          description: Validation exception
  /users/{id}:
    get:
      tags:
        - User
      summary: get a specific user from the db
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          description: Entity not found
        '405':
          description: Validation exception
    patch:
      tags:
        - User
      summary: saves updates to a specific user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Entity not found
        '405':
          description: Validation exception
    delete:
      tags:
        - User
      summary: deletes a user and all their data from the db
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '404':
          description: Entity not found
        '405':
          description: Validation exception

############################ COMPONENTS ############################
components:
  schemas:
    ######################## TRACKER COMPONENTS ############################
    CreateTracker:
      type: object
      properties:
        createdById:
          type: integer
          format: int64
          example: 10
        customName:
          type: string
          description: maximum 60 characters
          example: improve productivity
        comment:
          type: string
          description: maximum 150 characters
          example: I want to improve my productivity and stay on top of my tasks.
        type:
          type: string
          description: Tracker Type
          example: CHECKLIST
          enum:
            - CHECKLIST
            - CUSTOM
            - DIET
            - EXERCISE
            - MOOD
            - TIMETABLE
            - WEIGHT
    UpdateTracker:
      type: object
      properties:
        customName:
          type: string
          description: maximum 60 characters
          example: improve productivity
        comment:
          type: string
          description: maximum 150 characters
          example: I want to improve my productivity and stay on top of my tasks.
        version:
          type: integer
          format: int32
          example: 0
    TrackerDetails:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        createdBy:
          $ref: '#/components/schemas/UserInfo'
        streak:
          type: integer
          format: int32
          example: 7
        customName:
          type: string
          description: maximum 60 characters
          example: improve productivity
        createdOn:
          type: string
          format: date-time
        comment:
          type: string
          description: maximum 150 characters
          example: I want to improve my productivity and stay on top of my tasks.
        type:
          type: string
          description: Tracker Type
          example: WEIGHT
          enum:
            - CHECKLIST
            - CUSTOM
            - DIET
            - EXERCISE
            - MOOD
            - TIMETABLE
            - WEIGHT
        version:
          type: integer
          format: int32
          example: 2
    ############################ USER COMPONENTS ############################
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Tabea
    UpdateUser:
      type: object
      properties:
        username:
          type: string
          example: Tabea
        password:
          type: string
          example: ??
        newPassword:
          type: string
          example: ??
        email:
          type: string
          example: dargatztabea@gmail.com
        version:
          type: integer
          format: int32
          example: 0
    UserDetails:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 55
        password:
          type: string
          example: ??
        username:
          type: string
          example: Tabea D.
        email:
          type: string
          example: dargatztabea@gmail.com
        version:
          type: integer
          format: int32
          example: 1
    CreateUser:
      type: object
      properties:
        password:
          type: string
          example: ??
        username:
          type: string
          example: Tabea D.
        email:
          type: string
          example: dargatztabea@gmail.com